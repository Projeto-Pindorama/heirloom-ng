.\"
.\" Copyright (c) 2023 Luiz Antônio Rangel
.\"
.\" SPDX-Licence-Identifier: Zlib
.\"
.TH WATCH 1 "06/14/23" "Heirloom Toolchest" "User Commands"
.SH NAME
watch \- Keep an eye on a command output.
.SH SYNOPSIS
\fBwatch\fR [\fB\-n\fR \fIseconds\fR] [\fB\-bt\fR] \fBcommand\fR [\fIargs\fR...]
.SH DESCRIPTION
The
.B watch
utility executes a command repeatedly every
\fIseconds\fR seconds. This allows you to watch
a program output change over the time.
.PP
It accepts the following options:
.TP
.B \-n
Specifies the interval to refresh the output.
By default, the interval is of 2 seconds.
.TP
.B \-b
Beeps if the program being run returns a non-zero
exit status.
.TP
.B \-t
Turns off the information header, letting just the
verbatim program output being refreshed every time
on the screen \(em equivalent to a \fIksh\fR(1)
\fIfor ((;;))\fR accompanied by \fIsleep\fR(1).
.br
Not recommended, unless you're using \fItmux\fR(1)
or another terminal multiplexer that shows you
information that would originally be shown by that
header.
.SH EXAMPLES
It can be very useful when backing up a disk and
you need to see how many files were already copied.
.br
Let's suppose you're copying a disk from a terminal
and, in another, you want to keep an eye at
\fIdu\fR(1) output to see every minute if the file
size matches with what you're expecting.
.IP \& 2
.BI "% watch -n 60 -b du -sh /dsk/1"
.LP
.SH NOTES
.PP
This implementation supports intervals using
both European or Anglo decimal separators,
although sleeping in fractionated seconds does
not make a lot of sense.
.PP
This implementation does not support the
"\fIWATCH_INTERVAL\fR" environment
variable.
.SH "SEE ALSO"
execvp(3),
nanosleep(2),
curses(3X)
.SH HISTORY
The
.B watch(1)
utility has a hazy history.
Nobody seems to be actually sure of where
it appeared first.
.br
According to procps 010114's watch
C source code, where it first appeared in
that package, it was written from scratch
by Tony Rems in 1991, and later recieved
many modifications and corrections by
François Pinard.
.br
However, according to
Internet Initiative Japan Inc.'s iwatch
manual page, the watch utility came first
from BSDi's BSD/OS 3.1 and their code
is slightly derived from it; he/she
who wrote the manual page and comments
at the original source code also
speculated that its existence was earlier
than BSD/OS 3.1, from some another free
distribution, but there's no further
information that supports this.
.PP
This implementation mimics some of the basic
behavior of procps-ng's watch, but only the
necessary behavior to have a useful, simple
and stable program.
